产品需求文档 (PRD) - 在线学习与作业管理平台 (V3.0 Final)

版本历史
| 版本 | 日期 | 作者 | 主要变更 |
| :--- | :--- | :--- | :--- |
| 1.0 | [初始日期] | Gemini | 初始需求文档创建 |
| 2.0 | [上次日期] | Gemini | 整合了作业清单关联、AI批改、提交验证、毕业审核标准等需求。 |
| 3.0 | 2025年7月28日 | Gemini | 最终版： 移除了对Dify工作流的依赖，毕业资格审核将通过后端代码直接查询数据库并执行规则。 |
| 4.0 | 2025年7月29日 | Claude | 新增功能： 学号自动补全、优化AI批改提示词、完善重新提交功能、增强毕业资格说明。 |

1. 项目概述

1.1 项目背景
为了提升学员的学习效率和教学管理的自动化水平，我们计划开发一个在线学习与作业管理平台。该平台旨在为学员提供一个便捷、智能的作业提交、查询及反馈渠道。核心亮点在于利用人工智能技术（豆包大模型）实现作业的即时自动批改，并通过定制化的后端逻辑，对学员的毕业资格进行精确、自动化的审核。

1.2 目标用户

学员： 需要提交作业、查询批改结果并了解自己是否达到毕业标准的在册学员。

管理员/教师 (隐性用户)： 需要管理学员信息、作业清单以及查看整体作业提交与批改情况的管理人员。

1.3 核心目标

学员侧：

提供智能联动的作业提交流程，简化操作，提升体验。

提供基于AI的即时、透明的作业批改反馈。

清晰、准确地展示毕业资格审核结果。

管理侧：

实现作业批改的自动化，减轻教师负担，统一评判标准。

通过后端代码实现复杂毕业资格审核的自动化，提高效率和准确性。

通过结构化的数据存储，方便后续的数据分析与管理。

2. 功能需求

2.1 学员功能模块

2.1.1 首页/主面板
学员访问网站后，将看到一个清晰的导航主页，包含以下核心功能入口：

提交作业

查询我的作业

查询毕业资格

2.1.2 作业提交 (核心模块)
此模块旨在提供一个无缝、智能的作业提交流程。

表单智能联动：

学号输入与自动补全： 学员输入学号时，系统提供智能自动补全功能：
- 支持学号或姓名的模糊搜索
- 实时显示匹配的学员列表供选择
- 选择后自动填充学号和姓名
- 系统记住上次输入的学号，下次访问时自动填充

学习天数选择： 学员通过下拉菜单选择“第几天”。

作业名称选择： 根据所选天数，系统自动从“作业清单表”中筛选并加载当天对应的作业名称至下拉菜单。

作业详情自动展示： 学员选择具体作业名称后，页面自动从“作业清单表”中加载并显示以下信息：

作业类型： “必做”或“选做”。

具体作业要求： 详细的文字描述和评判标准。

附件上传与验证：

格式验证： 学员上传附件时，系统需进行前端验证。若文件不是图片格式（如.jpg, .png, .gif等），则阻止上传并弹出提示：“格式不对，请提交图片。”

大小验证： 若上传的图片文件大小超过3MB/张，则阻止上传并弹出提示：“图片太大，不要超过3M，请修改后重新上传。”

上传成功后，应清晰显示已上传的图片列表。支持上传多张图片。

提交、批改与后续流程：

提交： 学员点击“提交”按钮。

状态反馈： 作业状态在前端立即显示为 “批改中”。

AI批改调用： 后端服务将学员上传的图片及对应的“具体作业要求”文本，一并发送至豆包大模型API进行批改。

结果显示： AI批改完成后，系统立即在页面上更新并显示结果（如“合格”或“不合格”）。

后续操作引导： 结果显示后，页面上需清晰地提供以下三个操作按钮，供学员选择：

修改作业： 点击后允许学员重新提交作业，支持两种模式：
- 保留原有文件，添加新文件：原文件保留，可补充新的图片
- 删除原有文件，重新上传：完全替换原有文件
- 最终豆包AI审核的是所有提交的文件（原有+新增 或 全新文件）

继续交新作业： 返回到空白的作业提交表单页面。

查询是否可以毕业？： 跳转至毕业资格查询页面并显示结果。

2.1.3 查询我的作业
此页面用于展示学员所有提交过的作业历史。

列表展示： 以列表或卡片形式清晰展示每条提交记录，包含：提交日期、学习天数、作业名称、批改状态/结果（批改中、合格、不合格）。

操作功能： 
- 对于状态为"不合格"或"批改失败"的作业，提供"重新提交"功能
- 支持保留原文件或完全替换的重新提交模式
- 提供"删除作业"功能，允许学员删除自己的提交记录

2.1.4 查询毕业资格
学员点击此功能时，系统将根据明确的业务规则进行自动化审核。

功能说明： 页面需要清晰说明毕业资格标准，让学员了解审核规则：
- 标准一：所有"必做"作业均需完成且状态为"合格"
- 标准二："第一周第二天下午"的选做作业中至少完成1个
- 标准三：其他选做作业中至少完成1个
- 只有三个标准全部满足，才能获得毕业资格

触发方式： 学员点击"查询毕业资格"按钮。

后端审核逻辑 (Backend Logic)：

系统后端（例如：一个Netlify Serverless Function）接收到请求后，将携带学员学号直接查询Supabase数据库。

后端代码将严格按照以下 毕业合格审核标准 执行评估：

标准一 (必做)： 检查该学员在“作业提交审核表”中，所有类型为“必做”的作业是否状态 全部为“合格”。如果不是，则判定为不毕业。

标准二 (特定选做)： 检查“第一周第二天下午”的四个选做作业中，是否 至少有1个 状态为“合格”。如果不是，则判定为不毕业。

标准三 (其他选做)： 检查除“第一周第二天下午”四个选做作业以外的 所有其他“选做”作业 中，是否 至少有1个 状态为“合格”。如果不是，则判定为不毕业。

只有当以上 三个标准全部满足 时，最终结果才为“可以毕业”。

结果显示： 在页面上向学员清晰地展示最终审核结果，例如：

“恭喜您，已满足所有毕业条件！”

“尚未满足毕业条件。原因：[具体未达标的原因，如：必做作业未全部完成/特定选做作业未达标等]。”

2.2 管理与后端模块

2.2.1 数据库 (Supabase)
项目使用Supabase作为后端，包含以下三个核心表格。

学员名单表 (students):

student_id (学号, 主键), student_name (姓名)

作业清单表 (assignments):

数据来源： 此表的数据需通过解析和导入 “2025爱学AI实训营课程作业清单.xlsx” 文件进行初始化填充。

表结构：

assignment_id (作业ID, 主键)

day_number (第几天)

assignment_title (作业标题)

is_mandatory (是否必做, 布尔值)

description (具体作业要求, 文本)

assignment_category (作业分类, 重要字段): 用于毕业审核。例如，可设为 'W1D2_Afternoon_Optional' 或 'Regular_Optional'。

作业提交审核表 (submissions):

submission_id (提交ID, 主键), student_id (学号), assignment_id (作业ID), submission_date (提交时间), attachments_url (附件URL数组), status (状态: "批改中", "合格", "不合格"), feedback (AI批改评语, 可选)

2.2.2 智能批改 (豆包大模型)

模型信息：

Model ID: ep-20250524195324-l4t8t

API Key: Bearer 44cccf3b-5db1-4fc4-aaf6-f35a3710bb30 (安全警告： 此密钥绝不能硬编码在前端代码中，必须作为环境变量存储在Netlify的后端或函数中进行安全调用。)

集成逻辑：

接收前端上传的图片文件。

从“作业清单表”中获取该作业的“具体作业要求” (description)。

构建优化的Prompt，严格按照以下格式：
- 根据学员选择的作业对应的"详细作业要求"判断收到的图片是否符合要求
- 符合要求：返回"合格"，反馈内容只说"恭喜您，您的作业审核合格"
- 不符合要求：返回"不合格"，说明不合格原因并提出修改意见

接收API返回的结果，并将其解析为“合格”或“不合格”状态，更新至“作业提交审核表”。

2.2.3 毕业资格审核 (后端逻辑)

实现方式： 在后端代码中（如Netlify Function）创建一个专门用于毕业审核的函数。

执行逻辑：

函数接收学员的student_id作为参数。

使用Supabase客户端连接数据库。

执行数据库查询，分别统计并验证 2.1.4 中定义的三个毕业标准。

整合三个标准的布尔结果，得出最终的毕业资格。

将最终结果（及未达标原因）返回给前端。

3. 非功能性需求

3.1 部署

平台： 网站项目需完整部署到 Netlify，确保功能在线可用。

3.2 性能

响应速度： 页面加载、数据库联动查询、AI批改等待过程都应有良好的性能和清晰的状态提示（如加载动画）。

3.3 用户体验与界面 (UI/UX)

简洁直观： 界面设计应现代、简洁，操作流程符合用户直觉。

即时反馈： 用户的每一个关键操作都应有即时的视觉反馈。

3.4 安全性

API密钥保护： 所有API密钥（Supabase, 豆包大模型）必须通过Netlify的环境变量进行安全管理，严禁泄露在客户端。

数据权限： 需设置严格的Supabase行级安全策略（Row Level Security），确保学员只能访问和操作与自己学号关联的数据。